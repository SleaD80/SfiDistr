prototype(Sfi.Sfi:Paper) {
	partialRootPath = 'resource://Sfi.Sfi/Private/Partials'

	main = TYPO3.Neos:ContentCollection {
		nodePath = 'main'
	}

	@cache {
		mode = 'cached'
		maximumLifetime = '86400'
		entryIdentifier {
			node = ${node}
			editPreviewMode = ${editPreviewMode}
			format = ${request.format}
		}
		entryTags {
			# Whenever the node changes the matched condition could change
			1 = ${'Node_' + documentNode.identifier}
			# Whenever one of the parent nodes changes the layout could change
			2 = ${'DescendantOf_' + documentNode.identifier}
		}
	}
}

prototype(Sfi.Sfi:PaperShort) < prototype(TYPO3.Neos:Content) {
	templatePath = 'resource://Sfi.Sfi/Private/Templates/TypoScriptObjects/PaperShort.html'
	title = ${String.stripTags(q(node).property('title'))}
	teaser = ${String.stripTags(q(node).property('teaser'))}
	authorName = ${String.stripTags(q(node).property('authorName'))}
	authorDegree = ${String.stripTags(q(node).property('authorDegree'))}
	authorFrom = ${String.stripTags(q(node).property('authorFrom'))}
}


# Add support for PaperShort to renderer of Listable
prototype(Sfi.News:Listable).itemRenderer.paper {
	condition = ${q(node).is('[instanceof Sfi.Sfi:Paper]')}
	type = 'Sfi.Sfi:PaperShort'
}


prototype(TYPO3.Neos:PrimaryContent) {
	Paper {
		@position = 'before default'
		condition = ${q(node).is('[instanceof Sfi.Sfi:Paper]')}
		type = 'Sfi.Sfi:Paper'
	}
}
